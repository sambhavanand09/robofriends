{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","fetch","response","json","users","this","filteredrobot","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1fd18d91.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id,name,email}) =>{\r\n\treturn(\r\n\t<div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n\t<img alt =\"robots\"src = {`https://robohash.org/${email}?150x150`}/>\r\n\t<h1>{name}</h1>\r\n\t<p>{email}</p>\r\n\t</div>\r\n\t\t);\t\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user , i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t \t<Card\r\n\t\t\t\t \t  key = {i}\r\n\t\t\t\t \t  id = {robots[i].id}\r\n\t\t\t\t \t  name = {robots[i].name} \r\n\t\t\t\t \t  email = {robots[i].email}/>\r\n\t\t\t \t\t   );\r\n\t\t\t\t\t })\r\n\t\t} \t  \r\n\t\t \r\n\t\t</div>\r\n\r\n\t\t);\r\n\t\t}\r\n\r\nexport default CardList ;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div className = \"pa2\">\r\n\t\t\t<input \r\n\t\t\tclassName =\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\ttype = \"Search\"\r\n\t\t\tplaceholder =\"search robots\"\r\n\t\t\tonChange= {searchChange}\r\n\t\t\t/>\r\n\t\t</div>);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n\treturn(\r\n\t\t<div style ={{overflowY:'scroll',border:'1px solid black',height :'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield : ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>{this.setState({robots: users})});\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield :event.target.value})\r\n\r\n\t}\r\n\trender(){\r\n\t\tconst {robots ,searchfield } = this.state;\r\n\t\tconst filteredrobot =robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\t return !robots.length?\r\n\t\t\t <h1>LOADING</h1>:\r\n\t\t\t(\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots = {filteredrobot}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t}\r\n\r\n}\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport App from './containers/App';\n\nReactDOM.render(<App/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}